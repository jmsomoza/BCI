/*
*********************************************************************************************************
*                                            EXAMPLE CODE
*
*                          (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL
*
*               All rights reserved.  Protected by international copyright laws.
*
*               Please feel free to use any application code labeled as 'EXAMPLE CODE' in
*               your application products.  Example code may be used as is, in whole or in
*               part, or may be used as a reference only.
*
*               Please help us continue to provide the Embedded community with the finest
*               software available.  Your honesty is greatly appreciated.
*
*               You can contact us at www.micrium.com.
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*
*                                          APPLICATION CODE
*
*                                            CYCLONE V SOC
*
* Filename      : app.c
* Version       : V1.00
* Programmer(s) : JBL
* Modifications	: Nancy Minderman nancy.minderman@ualberta.ca, Brendan Bruner bbruner@ualberta.ca
* 				  Changes to this project include scatter file changes and BSP changes for port from
* 				  Cyclone V dev kit board to DE1-SoC
*********************************************************************************************************
* Note(s)       : none.
*********************************************************************************************************
*/


/*
*********************************************************************************************************
*                                            INCLUDE FILES
*********************************************************************************************************
*/

#include <alt_bridge_manager.h>
#include  <app_cfg.h>
#include  <lib_mem.h>

#include  <bsp.h>
#include  <bsp_int.h>
#include  <bsp_os.h>
#include  <cpu_cache.h>

#include  <cpu.h>
#include  <cpu_core.h>

#include  <os.h>
#include  <hps.h>
#include  <socal.h>
#include  <hwlib.h>
#include  <lcd.h>
#include  <circular_buffer.h>
#include  <peakfinder.h>

#include <alt_16550_uart.h>
#include <string.h>
#include  <time.h>


// Compute absolute address of any slave component attached to lightweight bridge
// base is address of component in QSYS window
// This computation only works for slave components attached to the lightweight bridge
// base should be ranged checked from 0x0 - 0x1fffff

#define FPGA_TO_HPS_LW_ADDR(base)  ((void *) (((char *)  (ALT_LWFPGASLVS_ADDR))+ (base)))

#define TOGGLE_LED_PRIO 5
#define DISPLAY_LCD_TASK_PRIO 6
#define TASK_STACK_SIZE 4096
#define BUFFER_SIZE 100
#define ADC_SIZE 20


#define LCDR_ADD 0x00000200
#define LCDR_BASE FPGA_TO_HPS_LW_ADDR(LCDR_ADD)

// external LEDs
#define EXT_ADD 0x00000400
#define EXT_BASE FPGA_TO_HPS_LW_ADDR(EXT_ADD)

// adc
#define ADC_ADD 0x00000500
#define ADC_BASE FPGA_TO_HPS_LW_ADDR(ADC_ADD)


/*
*********************************************************************************************************
*                                       LOCAL GLOBAL VARIABLES
*********************************************************************************************************
*/

CPU_STK ToggleLEDStk[TASK_STACK_SIZE];
CPU_STK DisplayOnLCDStk[TASK_STACK_SIZE];

FILE * fp;

uint16_t* buffer;
cbuf_handle_t cirbuf;

/*
*********************************************************************************************************
*                                      LOCAL FUNCTION PROTOTYPES
*********************************************************************************************************
*/

static  void  ToggleLED (void *p_arg);
static  void  DisplayOnLCD (void *p_arg);

/*
*********************************************************************************************************
*                                               main()
*
* Description : Entry point for C code.
*
* Arguments   : none.
*
* Returns     : none.
*
* Note(s)     : (1) It is assumed that your code will call main() once you have performed all necessary
*                   initialisation.
*********************************************************************************************************
*/

int main ()
{
    INT8U os_err;
    INT8U os_err_MsgQ;
    INT8U os_err_DisplayOnLCD;

    ALT_BRIDGE_t lw_bridge = ALT_BRIDGE_LWH2F;
    ALT_STATUS_CODE err_bridge = alt_bridge_init(lw_bridge, NULL, NULL);

    BSP_WatchDog_Reset();                                       /* Reset the watchdog as soon as possible.              */

                                                                /* Scatter loading is complete. Now the caches can be activated.*/
    BSP_BranchPredictorEn();                                    /* Enable branch prediction.                            */
    BSP_L2C310Config();                                         /* Configure the L2 cache controller.                   */
    BSP_CachesEn();                                             /* Enable L1 I&D caches + L2 unified cache.             */

    CPU_Init();

    Mem_Init();

    BSP_Init();


    OSInit();
    InitLCD();

    // initialize buffer of size BUFFER_SIZE
    buffer = malloc(BUFFER_SIZE * sizeof(uint16_t));
    // initialize circular buffer using the buffer just created
    cirbuf = circular_buf_init(buffer, BUFFER_SIZE);

    if (os_err_MsgQ != OS_ERR_NONE) {
            ; /* Handle error. */
        }


    os_err = OSTaskCreateExt((void (*)(void *)) ToggleLED,   /* Create the start task.                               */
                             (void          * ) 0,
                             (OS_STK        * )&ToggleLEDStk[TASK_STACK_SIZE - 1],
                             (INT8U           ) TOGGLE_LED_PRIO,
                             (INT16U          ) TOGGLE_LED_PRIO,  // reuse prio for ID
                             (OS_STK        * )&ToggleLEDStk[0],
                             (INT32U          ) TASK_STACK_SIZE,
                             (void          * )0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    if (os_err != OS_ERR_NONE) {
        ; /* Handle error. */
    }

    os_err_DisplayOnLCD = OSTaskCreateExt((void (*)(void *)) DisplayOnLCD,   /* Create the start task.                               */
                                     (void          * ) 0,
                                     (OS_STK        * )&DisplayOnLCDStk[TASK_STACK_SIZE - 1],
                                     (INT8U           ) DISPLAY_LCD_TASK_PRIO,
                                     (INT16U          ) DISPLAY_LCD_TASK_PRIO,  // reuse prio for ID
                                     (OS_STK        * )&DisplayOnLCDStk[0],
                                     (INT32U          ) TASK_STACK_SIZE,
                                     (void          * )0,
                                     (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	if (os_err_DisplayOnLCD != OS_ERR_NONE) {
				; /* Handle error. */
			}


	CPU_IntEn();

    OSStart();

}


/*
*********************************************************************************************************
*                                           ToggleLED()
*
* Description : Upon outputting the sampled voltage reading from the circular buffer, ensure that the
* 				value is not from an empty circular buffer and that the sample is not from the
*
* Arguments   : p_arg       Argument passed by 'OSTaskCreate()'.
*
* Returns     : none.
*
* Created by  : main().
*
* Notes       : (1) The determination of the "eye blink" voltage detection level (250mV) was found
* 					from various tests, and is adequate enough to detect the "eye blink".
*********************************************************************************************************
*/

static  void  ToggleLED (void *p_arg)
{
    BSP_OS_TmrTickInit(OS_TICKS_PER_SEC);                       /* Configure and enable OS tick interrupt.              */
    // variable representing the voltage of the current sample received from the circular buffer
    uint16_t voltage;
    // variable representing the voltage of the last sample received from the circular buffer
    uint16_t old_voltage;
    // delay to avoid reading an empty circular buffer, this delay allows the other task to put an element in the
    // circular buffer
    OSTimeDlyHMSM(0, 0, 0, 250);

    for(;;) {
        BSP_WatchDog_Reset();                                   /* Reset the watchdog.                                  */
        // retrieve the next available value from the buffer
        circular_buf_get(cirbuf, &voltage);
		// only light up the LEDs if the buffer is not empty (ADC value = 771), and a the voltage value is not
        // the same as the last sample
		if(voltage != 771 && voltage != old_voltage)
		{
			// if true then toggle the LED and delay for a small time in order to see the blink
			alt_write_word(EXT_BASE, (1 << 12)-1);
			OSTimeDlyHMSM(0, 0, 0, 250);
		}
		// assign current sample value to the old_voltage variable
		old_voltage = voltage;
		// delay here to align tasks, so that the DisplayOnLCD task can catch up to this task
		OSTimeDlyHMSM(0, 0, 1, 750);
    }

}

/*
*********************************************************************************************************
*                                           DisplayOnLCD()
*
* Description : Displays the received switch data on the LCD
*
* Arguments   : p_arg       Argument passed by 'OSTaskCreate()'.
*
* Returns     : none.
*
* Created by  : main().
*
* Notes       : (1) The ticker MUST be initialised AFTER multitasking has started.
*********************************************************************************************************
*/

static  void  DisplayOnLCD (void *p_arg)
{
	// initialize variables
	int index_counter = 0;
	char sw_val[20];
	char adc_val[ADC_SIZE];
	int data[ADC_SIZE];
	int adcarr[ADC_SIZE];
	int listOfIndexes[ADC_SIZE];
	int indx;

    // initialize file to store all the received values from the ADC in
	fp = fopen("c:\\users\\somoza\\ADC.txt","w");

	// align the LCD screen to print the required information
	ClearLCD();
	HomeLCD();
	PrintStringLCD("Volt(mV): ");
	for(;;)
	{
		for(int j = 0; j < ADC_SIZE; j++){
			// read sampled voltage data from the ADC dedicated memory address
			data[j] = alt_read_dword(ADC_BASE);
			adcarr[j] = (int) data[j];
			OSTimeDlyHMSM(0, 0, 0, 100);
		}

		indx = peakFinder(adcarr, ADC_SIZE, listOfIndexes);
		index_counter = 0;
			// align the LCD screen to print the required information
			MoveCursorLCD(10);
			PrintStringLCD("     ");
			MoveCursorLCD(10);

			if(indx > 0){
				sprintf(adc_val, "%i", adcarr[listOfIndexes[index_counter]]);
				PrintStringLCD(adc_val);
				PrintStringLCD("   ");
				PrintStringLCD(sw_val);
				// insert sampled voltage from the ADC into the circular buffer
				circular_buf_put(cirbuf, adcarr[listOfIndexes[index_counter]]);
				index_counter++;
			}
			else{
				sprintf(adc_val, "%i", 0000);
				PrintStringLCD(adc_val);
			}
			// align the LCD screen to print the required information
			MoveCursorLCD(30);
			PrintStringLCD("     ");
	}
}

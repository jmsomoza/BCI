/*
*********************************************************************************************************
*                                            EXAMPLE CODE
*
*                          (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL
*
*               All rights reserved.  Protected by international copyright laws.
*
*               Please feel free to use any application code labeled as 'EXAMPLE CODE' in
*               your application products.  Example code may be used as is, in whole or in
*               part, or may be used as a reference only.
*
*               Please help us continue to provide the Embedded community with the finest
*               software available.  Your honesty is greatly appreciated.
*
*               You can contact us at www.micrium.com.
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*
*                                          APPLICATION CODE
*
*                                            CYCLONE V SOC
*
* Filename      : app.c
* Version       : V1.00
* Programmer(s) : JBL
* Modifications	: Nancy Minderman nancy.minderman@ualberta.ca, Brendan Bruner bbruner@ualberta.ca
* 				  Changes to this project include scatter file changes and BSP changes for port from
* 				  Cyclone V dev kit board to DE1-SoC
*********************************************************************************************************
* Note(s)       : none.
*********************************************************************************************************
*/


/*
*********************************************************************************************************
*                                            INCLUDE FILES
*********************************************************************************************************
*/

#include  <app_cfg.h>
#include  <lib_mem.h>

#include  <bsp.h>
#include  <bsp_int.h>
#include  <bsp_os.h>
#include  <cpu_cache.h>

#include  <cpu.h>
#include  <cpu_core.h>

#include  <os.h>
#include  <hps.h>
#include  <socal.h>
#include  <hwlib.h>
#include  <lcd.h>
#include  <circular_buffer.h>

// Compute absolute address of any slave component attached to lightweight bridge
// base is address of component in QSYS window
// This computation only works for slave components attached to the lightweight bridge
// base should be ranged checked from 0x0 - 0x1fffff

#define FPGA_TO_HPS_LW_ADDR(base)  ((void *) (((char *)  (ALT_LWFPGASLVS_ADDR))+ (base)))

#define APP_TASK_PRIO 5
#define READ_SWITCH_TASK_PRIO 7
#define DISPLAY_LCD_TASK_PRIO 6
#define TASK_STACK_SIZE 4096
#define BUFFER_SIZE 100

#define LEDR_ADD 0x00000000
#define LEDR_BASE FPGA_TO_HPS_LW_ADDR(LEDR_ADD)

#define LCDR_ADD 0x00000200
#define LCDR_BASE FPGA_TO_HPS_LW_ADDR(LCDR_ADD)


#define SW_ADD 0x00000300
#define SW_BASE FPGA_TO_HPS_LW_ADDR(SW_ADD)

// externel LEDs
#define EXT_ADD 0x00000400
#define EXT_BASE FPGA_TO_HPS_LW_ADDR(EXT_ADD)

// adc
#define ADC_ADD 0x00000500
#define ADC_BASE FPGA_TO_HPS_LW_ADDR(ADC_ADD)

// adc
#define INPUT_ADD 0x00000600
#define INPUT_BASE FPGA_TO_HPS_LW_ADDR(INPUT_ADD)


/*
*********************************************************************************************************
*                                       LOCAL GLOBAL VARIABLES
*********************************************************************************************************
*/

CPU_STK AppTaskStartStk[TASK_STACK_SIZE];
CPU_STK ReadSwitchStk[TASK_STACK_SIZE];
CPU_STK DisplayOnLCDStk[TASK_STACK_SIZE];

void* switchelements[32];
OS_EVENT*  MsgQ;
FILE * fp;

uint16_t* buffer;
cbuf_handle_t cirbuf;

/*
*********************************************************************************************************
*                                      LOCAL FUNCTION PROTOTYPES
*********************************************************************************************************
*/

static  void  AppTaskStart (void *p_arg);
static  void  ReadSwitch (void *p_arg);
static  void  DisplayOnLCD (void *p_arg);
void print_buffer_status(cbuf_handle_t cbuf);

/*
*********************************************************************************************************
*                                               main()
*
* Description : Entry point for C code.
*
* Arguments   : none.
*
* Returns     : none.
*
* Note(s)     : (1) It is assumed that your code will call main() once you have performed all necessary
*                   initialisation.
*********************************************************************************************************
*/

int main ()
{
    INT8U os_err;
    INT8U os_err_MsgQ;
    INT8U os_err_ReadSwitch;
    INT8U os_err_DisplayOnLCD;

    BSP_WatchDog_Reset();                                       /* Reset the watchdog as soon as possible.              */

                                                                /* Scatter loading is complete. Now the caches can be activated.*/
    BSP_BranchPredictorEn();                                    /* Enable branch prediction.                            */
    BSP_L2C310Config();                                         /* Configure the L2 cache controller.                   */
    BSP_CachesEn();                                             /* Enable L1 I&D caches + L2 unified cache.             */


    CPU_Init();

    Mem_Init();

    BSP_Init();


    OSInit();
    InitLCD();

//    FILE * fp;
//    char adc_val[20];
//	  uint32_t adc = 0;
//    fp = fopen("c:\\users\\somoza\\hithere.txt","w");
//
//    if (fp == NULL)
//    {
//        printf("Error opening file!\n");
//    }
//    for(int i=0; i < 10; i++){
//    	adc=alt_read_dword(ADC_BASE);
//    	fprintf(fp, "%u\r\n\r\n", adc);
//    	sprintf(adc_val, "%u", adc);
//    }
//    printf("ADC value: %u\n", adc);
//    fclose(fp);

    buffer = malloc(BUFFER_SIZE * sizeof(uint16_t));
    cirbuf = circular_buf_init(buffer, BUFFER_SIZE);

    MsgQ = OSQCreate(switchelements, 32);

    if (os_err_MsgQ != OS_ERR_NONE) {
            ; /* Handle error. */
        }

    os_err = OSTaskCreateExt((void (*)(void *)) AppTaskStart,   /* Create the start task.                               */
                             (void          * ) 0,
                             (OS_STK        * )&AppTaskStartStk[TASK_STACK_SIZE - 1],
                             (INT8U           ) APP_TASK_PRIO,
                             (INT16U          ) APP_TASK_PRIO,  // reuse prio for ID
                             (OS_STK        * )&AppTaskStartStk[0],
                             (INT32U          ) TASK_STACK_SIZE,
                             (void          * )0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    if (os_err != OS_ERR_NONE) {
        ; /* Handle error. */
    }

    os_err_ReadSwitch = OSTaskCreateExt((void (*)(void *)) ReadSwitch,   // Create the start task.
                                     (void          * ) 0,
                                     (OS_STK        * )&ReadSwitchStk[TASK_STACK_SIZE - 1],
                                     (INT8U           ) READ_SWITCH_TASK_PRIO,
                                     (INT16U          ) READ_SWITCH_TASK_PRIO,  // reuse prio for ID
                                     (OS_STK        * )&ReadSwitchStk[0],
                                     (INT32U          ) TASK_STACK_SIZE,
                                     (void          * )0,
                                     (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

        if (os_err_ReadSwitch != OS_ERR_NONE) {
                    ; // Handle error.
                }

    os_err_DisplayOnLCD = OSTaskCreateExt((void (*)(void *)) DisplayOnLCD,   /* Create the start task.                               */
                                     (void          * ) 0,
                                     (OS_STK        * )&DisplayOnLCDStk[TASK_STACK_SIZE - 1],
                                     (INT8U           ) DISPLAY_LCD_TASK_PRIO,
                                     (INT16U          ) DISPLAY_LCD_TASK_PRIO,  // reuse prio for ID
                                     (OS_STK        * )&DisplayOnLCDStk[0],
                                     (INT32U          ) TASK_STACK_SIZE,
                                     (void          * )0,
                                     (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	if (os_err_DisplayOnLCD != OS_ERR_NONE) {
				; /* Handle error. */
			}


	CPU_IntEn();

    OSStart();

}


/*
*********************************************************************************************************
*                                           App_TaskStart()
*
* Description : Startup task example code.
*
* Arguments   : p_arg       Argument passed by 'OSTaskCreate()'.
*
* Returns     : none.
*
* Created by  : main().
*
* Notes       : (1) The ticker MUST be initialised AFTER multitasking has started.
*********************************************************************************************************
*/

static  void  AppTaskStart (void *p_arg)
{

    BSP_OS_TmrTickInit(OS_TICKS_PER_SEC);                       /* Configure and enable OS tick interrupt.              */

    INT8U count;

    for(;;) {
        BSP_WatchDog_Reset();                                   /* Reset the watchdog.                                  */

        OSTimeDlyHMSM(0, 0, 0, 500);

        BSP_LED_On();
        count++;

        alt_write_byte(LEDR_BASE, 0x00);

        OSTimeDlyHMSM(0, 0, 0, 500);

        BSP_LED_Off();
        alt_write_byte(LEDR_BASE, 0xff);

        uint16_t voltage;

        circular_buf_get(cirbuf, &voltage);
        printf("Voltage value: %u\n", voltage);

		if(voltage == 4095)
			{alt_write_word(EXT_BASE, 15);}
		else if (voltage < 4095 && voltage > 4600)
			{alt_write_word(EXT_BASE, 10);}
		else if (voltage <= 4600 && voltage > 4300)
			{alt_write_word(EXT_BASE, 5);}
		else if (voltage <= 4300)//(voltage <= 4300 && voltage > 3095)
			{alt_write_word(EXT_BASE, 0);}

    }

}

/*
*********************************************************************************************************
*                                           ReadSwitch()
*
* Description : Reads data value from switch.
*
* Arguments   : p_arg       Argument passed by 'OSTaskCreate()'.
*
* Returns     : none.
*
* Created by  : main().
*
* Notes       : (1) The ticker MUST be initialised AFTER multitasking has started.
*********************************************************************************************************
*/

static  void  ReadSwitch (void *p_arg)
{

    BSP_OS_TmrTickInit(OS_TICKS_PER_SEC);                       // Configure and enable OS tick interrupt.


    for(;;) {
    	uint32_t test = alt_read_dword(SW_BASE);
    	// turns on the LED # corresponding to switch value (0-15)
    	alt_write_word(EXT_BASE, (1 << test)-1);
    	OSTimeDlyHMSM(0, 0, 0, 500);

    	printf("%u", test);
    	char sw_val[20];
    	sprintf(sw_val, "%u", test);
    	printf("%s", sw_val);

    	OSQPost(MsgQ, (void*)test);
    }

}

/*
*********************************************************************************************************
*                                           DisplayOnLCD()
*
* Description : Displays the received switch data on the LCD
*
* Arguments   : p_arg       Argument passed by 'OSTaskCreate()'.
*
* Returns     : none.
*
* Created by  : main().
*
* Notes       : (1) The ticker MUST be initialised AFTER multitasking has started.
*********************************************************************************************************
*/

static  void  DisplayOnLCD (void *p_arg)
{
	 INT8U os_err_local;

	ClearLCD();
	HomeLCD();
	PrintStringLCD("Volt(mV): ");
	MoveCursorLCD(20);
	PrintStringLCD("Switches: ");
	char sw_val[20];
	char adc_val[20];
	uint16_t adc = 0;
	fp = fopen("c:\\users\\somoza\\hithere.txt","w");

	for(;;)
	{
		adc=alt_read_dword(ADC_BASE);
		sprintf(adc_val, "%u", adc);
		//printf(adc);
		uint32_t msg = (uint32_t) OSQPend(MsgQ, 0, &os_err_local);
		sprintf(sw_val, "%u", msg);
		//char * msg = OSQAccept(&MsgQ, os_err_local);

		MoveCursorLCD(10);
		PrintStringLCD("     ");
		MoveCursorLCD(10);
		PrintStringLCD(adc_val);
		fprintf(fp, "%u\r\n", adc);
		circular_buf_put(cirbuf, adc);
		printf("ADC value: %u\n", adc);
		print_buffer_status(cirbuf);
		MoveCursorLCD(30);
		PrintStringLCD("     ");
		MoveCursorLCD(30);
		PrintStringLCD(sw_val);
		//fclose(fp);
	}
	 //fclose(fp);
	free(buffer);
	circular_buf_free(cirbuf);
}

void print_buffer_status(cbuf_handle_t cbuf)
{
	printf("Full: %d, empty: %d, size %u\n",
			circular_buf_full(cbuf),
			circular_buf_empty(cbuf),
			circular_buf_size(cbuf));
}

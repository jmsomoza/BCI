#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
#include "peakfinder.h"

void diff (int * input, int * output, int input_size);
void arrayProduct(int * arrayA, int * arrayB, int * output, int input_size);
int min(int * data, int data_size);
int max(int * data, int data_size);
int peakFinder(int * data, int data_size, int * peakInds);
int indicesLessThanThreshold(int * inputdata, int in_size, float threshold, int * indices);
void selectElements(int * inputdata, int * indices, int indices_size, int * outputdata);

int main()
{
	int List[] = {3992,3948,3932,3924,3904,3864,3852,3823,3796,3788,3768,3740,
    3712,3668,3667,4095,3879,3764,3719,3667,3612,3567,3568,3596,3608,3547,3459,
    3248,3239,3223,3276,3235,3059,3596,3136,3047,3036,3048,3067,3072,3055,3152,
    3052,3011,2995,3183,3084,2907,2875,2859,2927,2936,2880,2864,2879,2788,2872,
    3200,2832,2732,2711,2700,2691,2672,2660,2635,2628,2623,2619,2599,2623,2583,
    2595,2636,3516,2668,2491,2496,2500,2483,2408,2415,2423,3259,2659,2488,2451,
    2436,2431,2428,2392,2376,2364,2351,2335,2320,3107,2424,2340,2335};

    int list_size = sizeof(List)/sizeof(int);

    int minIndex = min(List, list_size);
    int maxIndex = max(List, list_size);

	//printf("miniNDEX: %i, minvalue: %i\n", minIndex, List[minIndex]);
	//printf("maxiNDEX: %i, maxvalue: %i\n", maxIndex, List[maxIndex]);

	int listOfIndexes[100] = {0};

	int indx = peakFinder(List, list_size, listOfIndexes);

	for(int i = 0; i < indx; i++){
        printf("%i %i\n", listOfIndexes[i], List[listOfIndexes[i]]);
	}

    return 0;
}

int peakFinder(int * data, int data_size, int * peakInds)
{
    int minIdx = min(data, data_size); //find the minimum value of the data array
    int maxIndx = max(data, data_size); //find the maximum value of the data array
    int totalNumOfIndices = 0;
    float sel = 250.0; //The amount above surrounding data for a peak to be identified (called sel)

    int diffdata[data_size - 1]; //initialize array that will store the derivative of the data array

    diff(data, diffdata, data_size); //find the derivative of the data array and store it in diffdata

    for(int i = 0; i < data_size; i++){ //if a data point is zero, change it to 2.2204e-16
        if(data[i] == 0)
            data[i] = EPS;
    }

    int diffdata_size = sizeof(diffdata)/sizeof(int); //get size of derivative array
    int diff1[diffdata_size - 1]; //initialize derivative analysis arrays
    int diff2[diffdata_size - 1];
    int diff3[diffdata_size - 1];

    for(int i = 1; i < diffdata_size; i++){
        diff1[i-1] = diffdata[i-1]; //load diff1 with the first 98 elements of the derivative array
        diff2[i-1] = diffdata[i]; //load diff2 with the last 98 elements of the derivative array
    }

    arrayProduct(&diff1, &diff2, diff3, diffdata_size - 1); //diff3 is the product of diff1 and diff2 (done to check where the sign of the derivative changes - product will remain positive if diffs have the same sign)

    int changeInDerivativeIndices[diffdata_size - 1]; //initialize an array that will store all the indices of elements where the derivative changes sign
    int numOfIndices = indicesLessThanThreshold(diff3, diffdata_size - 1, 0, changeInDerivativeIndices); //finds where the derivative changes sign and store those indices in the changeInDerivativeIndices array

    int derivChangeData[numOfIndices]; //initialize an array that will store the data at the indices when the derivative changes sign
    selectElements(data, changeInDerivativeIndices, numOfIndices, derivChangeData); //fill derivChangeData with the data values at the indices when the derivative changes sign

    int len = numOfIndices; //+ 2;

    int minMagIdx = min(derivChangeData, numOfIndices); //find the index with the minimum value in the data array
    int minMagData = derivChangeData[minMagIdx]; //find the minimum value in the data array
    int leftMin = minMagData;

    if(len > 2)
    {
        int tempMag = minMagData;
        bool foundPeak = false;
        int ii;

        int potentialPeak[len];
        int potentialPeakIndices[len];

        for(int i = 0; i < numOfIndices; i++){
                potentialPeak[i] = derivChangeData[i];
                potentialPeakIndices[i] = changeInDerivativeIndices[i];
        }

        if(potentialPeak[0] >= potentialPeak[1])
            ii = 0;
        else
            ii = 1;

        float maxPeaks = ceil(len/2.0);
        int mPeaks = (int) maxPeaks;
        int peakLoc[mPeaks];
        int peakMag[mPeaks];
        memset(peakLoc, 0, mPeaks*sizeof(int));
        memset(peakMag, 0, mPeaks*sizeof(int));
        int cInd = 1;
        int tempLoc;

        while(ii < len)
        {
            ii = ii + 1;

            if(foundPeak){ //if peak is found, reset the temp peak magnitude value and foundPeak boolean
                tempMag = minMagData;
                foundPeak = false;
            }

            //Found new peak that was larger than temp mag now check that it is bigger
        	//than the minimum to its left + sel.

        	if( potentialPeak[ii-1] > tempMag && potentialPeak[ii-1] > leftMin + sel )
        	{
            	tempLoc = ii-1;
            	tempMag = potentialPeak[ii-1];
        	}

        	//Make sure we don't iterate past the length of our vector
        	if(ii == len)
            	break; //We assign the last point differently out of the loop

        	ii = ii+1; // Move onto the valley (point after the peak)

        	//Come down at least sel from peak (aka ensure that the peak is sel amount bigger than the right minimum)
        	if(!foundPeak && tempMag > sel + potentialPeak[ii-1])
            {
	            foundPeak = true; //We have found a peak
	            leftMin = potentialPeak[ii-1];
	            peakLoc[cInd-1] = tempLoc; // Add peak to index
	            peakMag[cInd-1] = tempMag;
	            cInd = cInd+1;
	        }
        	else if(potentialPeak[ii-1] < leftMin) // peak was not sel amount bigger than the right minimum so it is not considered a peak, therefore set the left minimum to the next available mi
            	//printf("TEST3\n");
            	leftMin = potentialPeak[ii-1];
        }

        if (potentialPeak[len-1] > tempMag && potentialPeak[len-1] > leftMin + sel){
            peakLoc[cInd-1] = len-1;
            peakMag[cInd-1] = potentialPeak[len-1];
            cInd = cInd + 1;
        }
        else if(!foundPeak && tempMag > minMagData){
            peakLoc[cInd-1] = tempLoc;
            peakMag[cInd-1] = tempMag;
            cInd = cInd + 1;
        }

        if(cInd > 0){
            selectElements(potentialPeakIndices, peakLoc, cInd-1, peakInds);
        }

        totalNumOfIndices = cInd - 1;

//        for(int i = 0; i < cInd-1; i++){
//            printf("%i %i %i %i\n", peakLocTmp[i], potentialPeakIndices[peakLocTmp[i]], peakInds[i], cInd);
//        }

    }

    return totalNumOfIndices;
}

// return the index of the minimum element in th data array
int min(int * data, int data_size)
{
    int minValue = *data;
    int minIndex = 0;

    for(int i = 0; i < data_size; i++){
        if (*(data + i) < minValue){
            {minValue = *(data + i); minIndex = i;}
        }
    }

    return minIndex;
}

// return the index of the maximum element in th data array
int max(int * data, int data_size)
{
    int maxValue = *data;
    int maxIndex = 0;

    for(int i = 0; i < data_size; i++){
        if (*(data + i) > maxValue){
            {maxValue = *(data + i); maxIndex = i;}
        }
    }

    return maxIndex;
}

//sets the output array to contain the derivative of the elements in the input array
// therefore the size of the output array will be one element shorter than the input array
void diff (int * input, int * output, int input_size)
{
	for(int i = 1; i < input_size; i++){
		*(output + (i - 1)) = input[i] - input[i-1];
	}
}

//sets the output array to contain the product of the the elements in arrayA and arrayB
// therefore the size of the output array will be equal to the size of the input array
void arrayProduct(int * arrayA, int * arrayB, int * output, int arrA_size)
{
    for(int i = 0; i < arrA_size; i++){
		*(output + (i)) = arrayA[i] * arrayB[i];
	}
}

//returns the number of elements in the inputdata array

int indicesLessThanThreshold(int * inputdata, int in_size, float threshold, int * indices)
{
    int count = 0;

    for(int i = 0; i < in_size; i++){
        if(inputdata[i] < threshold){
            *(indices + (count)) = i+1;
            count += 1;
        }
    }
    return count;
}

void selectElements(int * inputdata, int * indices, int indices_size, int * outputdata)
{
    int ind = 0;

    for(int i = 0; i < indices_size; i++){
        *(outputdata + (i)) = inputdata[indices[i]];
    }
}

void signArray(int * input, int input_size, int * output)
{
        for(int i = 0; i < input_size; i++){
            if(input[i] > 0)
                *(output + (i)) = 1;
            else if(input[i] < 0)
                *(output + (i)) = -1;
            else
                *(output + (i)) = 0;
        }
}
